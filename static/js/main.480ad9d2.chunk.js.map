{"version":3,"sources":["components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","componentWillMount","checkIfPlainTypeEnabled","checkIfGradientTypeEnabled","setState","appClass","bgStyle","prepareGradientStyleSheets","checkIfImageTypeEnabled","prepareBackgroundImageStyle","checkIfNightModeEnabled","state","backgroundType","checkIfDayModeEnabled","Configs","gradientColors","background","backgroundSize","backgroundImageUrl","getDefaultModeBasedOnBackgroundType","lightBackgroundModes","darkBackgroundModes","changeThemeMode","e","backgroundIndex","backgroundMode","changeBackgroundBasedonMode","length","plainBackgroundMode","devIntro","devDesc","icons","this","className","style","onClick","map","icon","target","rel","href","url","image","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.480ad9d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Typist from 'react-typist';\r\nimport Configs from '../shared/configurations.json';\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      darkBackgroundModes: [\r\n        'day',\r\n        'terminal',\r\n        'torquoise',\r\n        'alizarin',\r\n        'amythyst',\r\n        'carrot',\r\n        'peterriver'\r\n      ],\r\n      lightBackgroundModes: [\r\n        'night',\r\n        'lightred',\r\n        'lightpurple',\r\n        'lightgreen',\r\n        'lightblue',\r\n        'lightyellow'\r\n      ],\r\n      backgroundType: Configs.backgroundType || 'plain',\r\n      appClass: Configs.plainBackgroundMode || 'daylight',\r\n      devIntro: Configs.devIntro || 'Lorem Ipsum',\r\n      devDesc:\r\n        Configs.devDesc ||\r\n        'Aute veniam ut deserunt cillum irure pariatur Lorem dolore anim nostrud quis veniam elit culpa.',\r\n      backgroundMode: 'default',\r\n      backgroundIndex: 0,\r\n      bgStyle: {},\r\n      icons: Configs.icons || []\r\n    };\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    if (this.checkIfPlainTypeEnabled()) {\r\n      return true;\r\n    } else if (this.checkIfGradientTypeEnabled()) {\r\n      this.setState({\r\n        appClass: 'gradient',\r\n        bgStyle: this.prepareGradientStyleSheets()\r\n      });\r\n    } else if (this.checkIfImageTypeEnabled()) {\r\n      this.setState({\r\n        appClass: 'full-bg-image',\r\n        bgStyle: this.prepareBackgroundImageStyle()\r\n      });\r\n    }\r\n  };\r\n\r\n  checkIfNightModeEnabled = () => {\r\n    return (\r\n      this.state.backgroundType === 'plain' &&\r\n      this.state.appClass === 'nightlight'\r\n    );\r\n  };\r\n\r\n  checkIfDayModeEnabled = () => {\r\n    return (\r\n      this.state.backgroundType === 'plain' &&\r\n      this.state.appClass === 'daylight'\r\n    );\r\n  };\r\n\r\n  checkIfGradientTypeEnabled = () => {\r\n    return this.state.backgroundType === 'gradient';\r\n  };\r\n\r\n  checkIfPlainTypeEnabled = () => {\r\n    return this.state.backgroundType === 'plain';\r\n  };\r\n\r\n  checkIfImageTypeEnabled = () => {\r\n    return this.state.backgroundType === 'image';\r\n  };\r\n\r\n  prepareGradientStyleSheets = () => {\r\n    if (Configs.gradientColors) {\r\n      return {\r\n        background: 'linear-gradient(-45deg, ' + Configs.gradientColors + ')',\r\n        backgroundSize: '400% 400%'\r\n      };\r\n    } else {\r\n      return {\r\n        background:\r\n          'linear-gradient(-45deg, #EE7752, #E73C7E, #23A6D5, #23D5AB)',\r\n        backgroundSize: '400% 400%'\r\n      };\r\n    }\r\n  };\r\n\r\n  prepareBackgroundImageStyle = () => {\r\n    if (Configs.backgroundImageUrl) {\r\n      return {\r\n        background:\r\n          'url(\"' +\r\n          Configs.backgroundImageUrl +\r\n          '\") no-repeat center center fixed',\r\n        backgroundSize: 'cover'\r\n      };\r\n    } else {\r\n      return {\r\n        background:\r\n          'url(\"/images/sample-background.jpg\") no-repeat center center fixed',\r\n        backgroundSize: 'cover'\r\n      };\r\n    }\r\n  };\r\n\r\n  getDefaultModeBasedOnBackgroundType = () => {\r\n    if (this.checkIfNightModeEnabled()) {\r\n      return this.state.lightBackgroundModes[0];\r\n    } else if (this.checkIfDayModeEnabled()) {\r\n      return this.state.darkBackgroundModes[0];\r\n    }\r\n  };\r\n\r\n  changeThemeMode = e => {\r\n    if (this.checkIfNightModeEnabled()) {\r\n      this.setState({\r\n        appClass: 'daylight',\r\n        backgroundIndex: 0,\r\n        backgroundMode: this.state.darkBackgroundModes[0]\r\n      });\r\n    } else if (this.checkIfDayModeEnabled()) {\r\n      this.setState({\r\n        appClass: 'nightlight',\r\n        backgroundIndex: 0,\r\n        backgroundMode: this.state.lightBackgroundModes[0]\r\n      });\r\n    }\r\n  };\r\n\r\n  changeBackgroundBasedonMode = () => {\r\n    if (\r\n      this.checkIfNightModeEnabled() &&\r\n      this.state.backgroundIndex < this.state.lightBackgroundModes.length - 1\r\n    ) {\r\n      this.setState({\r\n        backgroundIndex: this.state.backgroundIndex + 1,\r\n        backgroundMode: this.state.lightBackgroundModes[\r\n          this.state.backgroundIndex + 1\r\n        ]\r\n      });\r\n    } else if (\r\n      this.checkIfDayModeEnabled() &&\r\n      this.state.backgroundIndex < this.state.darkBackgroundModes.length - 1\r\n    ) {\r\n      this.setState({\r\n        backgroundIndex: this.state.backgroundIndex + 1,\r\n        backgroundMode: this.state.darkBackgroundModes[\r\n          this.state.backgroundIndex + 1\r\n        ]\r\n      });\r\n    } else {\r\n      this.setState({\r\n        backgroundIndex: 0,\r\n        backgroundMode: this.getDefaultModeBasedOnBackgroundType()\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      appClass, bgStyle, backgroundMode, devIntro, devDesc, icons\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={ appClass } style={ bgStyle }>\r\n        <div className=\"change-mode\" onClick={this.changeThemeMode} />\r\n        <div\r\n          className={ backgroundMode }\r\n          onClick={this.changeBackgroundBasedonMode}>\r\n          <main className=\"App-main\">\r\n            <h1 className=\"intro\">{ devIntro }</h1>\r\n            <div className=\"tagline\">\r\n              <Typist>{ devDesc }</Typist>\r\n            </div>\r\n            <div className=\"icons-social\">\r\n              {icons.map(icon => (\r\n                <a\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  href={ `${icon.url}` }\r\n                >\r\n                  <i className={ `fab ${icon.image}` } />\r\n                </a>\r\n              ))}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/MainComponent';\n\nclass App extends Component {\n    render() {\n\n    return (\n      <div className=\"App\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}